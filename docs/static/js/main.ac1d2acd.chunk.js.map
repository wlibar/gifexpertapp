{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDom","render","document","getElementById"],"mappings":"mMASaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAjBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCVnBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EAC3B,MAAO,CACLC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QATlB,kBAYZM,GAZY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCAHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAEvB,ECL0B,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OATAC,qBAAW,WACPxB,EAASC,GACJwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAKkB,EACLL,SAAS,SAGtB,CAACpB,IACGqB,EDbsBK,CAAc1B,GAAjCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OACE,qCACE,oBAAIJ,UAAU,iBAAd,SAAiChB,IAC/BoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACb,qBAAKA,UAAU,YAAf,SAEMH,EAAOJ,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEbVgB,EAAe,WACxB,MAAoCzC,mBAAS,CAAC,SAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,qCACI,6CACA,cAAC,EAAD,CAAaA,cAAkBA,IAE/B,uBAEA,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADHA,Y,MCfnC6B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ac1d2acd.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * \n * Agrega una categoria. \n * Renderiza el formulario con la caja de texto. \n * Al presionar enter en la caja agrega la categoria al arreglo.\n */\nexport const AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('');\n    \n    const handleInputChange = (e) => {\n        setInputValue( e.target.value );\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2){\n            setCategories( cats => [inputValue,...cats] );\n            setInputValue('');\n        }\n    };\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\" \n                value={ inputValue }\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","/**\n * Helper que carga la data desde la API. \n */\nexport const getGifs = async(category)=>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=9MlBb7aC50iNY76MrztzdBXhv24jECfC`;\n    const resp = await fetch (url);\n    const {data} = await resp.json();\n    \n    const gifs = data.map (img =>{\n      return {\n        id:img.id,\n        title:img.title,\n        url:img.images?.downsized_medium.url\n      }\n    })\n    return gifs;\n  }\n","import React from 'react';\n\n/**\n * Componente que renderiza una imagen en particular.\n */\nexport const GifGridItem = ({title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__backInDown\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n/**\n * Recupera de la api las imagenes de una categorÃ­a y\n * pinta una por una invocando el componente GifGridItem\n * \n */\nexport const GifGrid = ({category}) => {\n  // Invoca el custohook que recupera las imagenes\n  const {data:images, loading} = useFetchGifs( category );\n\n  return (\n    <>\n      <h3 className=\"animate__pulse\">{ category }</h3> \n      { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n      <div className=\"card-grid\">\n          {\n            images.map((img) => (\n            <GifGridItem \n              key={img.id}\n              {...img}/>\n            )) }\n         \n      </div>\n    </>\n  )\n}\n","import { useEffect, useState } from 'react';\nimport {getGifs} from '../helpers/getGifs';\n/**\n * CustomHook que carga la data invocando el helper\n * getGifs. Controla ademas la bandera de carga\n */\nexport const useFetchGifs = (category) => {\n    const [state, setstate] = useState({\n        data:[],\n        loading: true\n    });\n    /**\n     * useEffect: Usar este efecto. Sirve para que getGifs se ejecute una sola vez\n     * cuando el componente es renderizado.\n    */\n    useEffect( () =>{\n        getGifs( category)\n            .then(imgs => {\n                setstate({\n                    data:imgs,\n                    loading: false\n                });\n            })\n    }, [category])\n    return state;\n}\n","import React,{useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n/**\n * Componente principal\n * @returns \n */\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState(['Dogs']);\n\n    return (\n        <>\n            <h2>GifExperApp</h2>\n            <AddCategory setCategories = { setCategories } />\n\n            <hr />\n      \n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid \n                            key = {category}\n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\n\n// snniped rafc\n","import React from 'react';\n\nimport ReactDom from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\nReactDom.render(\n    <GifExpertApp />,\n    document.getElementById('root'),\n);\n\n// snniped rafc\n"],"sourceRoot":""}